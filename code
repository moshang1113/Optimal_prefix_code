
#include <iostream>
using namespace std;


const int maxn=1e5+10;
const int maxha=1e5+10;
const int maxco=1e5+10;
const int maxw=1e5;
typedef struct Haffman {
    int weight;
    //字符
    char ch;
    //父节点
    int parent;
    //左儿子节点
    int lchild;
    //右儿子节点
    int rchild;
} node;

typedef struct Code {
    int code[maxn];
    //从哪个位置开始
    int start;
} Code;

node p[maxha];
Code code[maxco];

void buildp(int n) {
    
    //每次找出最小的权重的节点,生成新的节点,需要n - 1 次合并
    int x1, x2, w1, w2;
    for (int i = 0; i < n - 1; ++i) {
        x1 = x2 = -1;
        w1 = w2 = maxw;
        //注意这里每次是n + i次里面便利
        for (int j = 0; j < n + i; ++j) {
            //得到最小权重的节点
            if (p[j].parent == -1 && p[j].weight < w1) {
                //如果每次最小的更新了，那么需要把上次最小的给第二个最小的
                w2 = w1;
                x2 = x1;
                x1 = j;
                w1 = p[j].weight;
            }
            //这里用else if而不是if,是因为它们每次只选1个就可以了。
            else if (p[j].parent == -1 && p[j].weight < w2) {
                x2 = j;
                w2 = p[j].weight;
            }
        }
        //么次找到最小的两个节点后要记得合并成一个新的节点
        p[n + i].lchild = x1;
        p[n + i].rchild = x2;
        p[n + i].weight = w1 + w2;
        p[x1].parent = n + i;
        p[x2].parent = n + i;
    }
}
void printCode(int n) {
    //保存当前叶子节点的字符编码
    Code hCode;
    //当前父节点
    int curParent;
    //下标和叶子节点的编号
    int c;
    //遍历的总次数
    for (int i = 0; i < n; ++i) {
        hCode.start = n - 1;
        c = i;
        curParent = p[i].parent;
        while (curParent != -1) {
            //我们先拿到父节点，然后判断左节点是否为当前值，如果是取节点0
            //否则取节点1,这里的c会变动，所以不要用i表示，我们用c保存当前变量i
            if (p[curParent].lchild == c) {
                hCode.code[hCode.start] = 0;
                cout << "hCode.code[" << hCode.start << "] = 0"<<endl;
            } else {
                hCode.code[hCode.start] = 1;
                cout << "hCode.code[" << hCode.start << "] = 1"<<endl;
            }
            hCode.start--;
            c = curParent;
            curParent = p[c].parent;
        }
        //把当前的叶子节点信息保存到编码结构体里面
        for (int j = hCode.start + 1; j < n; ++j) {
            code[i].code[j] = hCode.code[j];
        }
        code[i].start = hCode.start;
    }
}
int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n * 2 - 1; ++i) {
        p[i].weight = 0;
        p[i].parent = -1;
        p[i].lchild = -1;
        p[i].rchild = -1;
    }
    
    for (int i = 0; i < n; i++) {
        cin >> p[i].ch;
        cin >> p[i].weight;
    }
    buildp(n);
    printCode(n);
    for (int i = 0; i < n; ++i) {
        cout << p[i].ch << ": p Code is:";
        for (int j = code[i].start + 1; j < n; ++j) {
            cout << code[i].code[j];
        }
        cout <<endl;
    }
    return 0;
}
